{"ast":null,"code":"var _jsxFileName = \"C:\\\\Trello\\\\src\\\\Components\\\\CustomInput\\\\CustomInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { X } from \"react-feather\";\nimport \"./CustomInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CustomInput(props) {\n  _s();\n\n  const {\n    text,\n    onSubmit,\n    displayClass,\n    editClass,\n    placeholder,\n    defaultValue,\n    buttonText\n  } = props;\n  const [isCustomInput, setIsCustomInput] = useState(false);\n  const [inputText, setInputText] = useState(defaultValue || \"\");\n\n  const submission = e => {\n    e.preventDefault();\n\n    if (inputText && onSubmit) {\n      setInputText(\"\");\n      onSubmit(inputText);\n    }\n\n    setIsCustomInput(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-input\",\n    children: isCustomInput ? /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `custom-input-edit ${editClass ? editClass : \"\"}`,\n      onSubmit: submission,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        placeholder: placeholder || text,\n        onChange: event => setInputText(event.target.value),\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-input-edit-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: buttonText || \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(X, {\n          onClick: () => setIsCustomInput(false),\n          className: \"closeIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `custom-input-display ${displayClass ? displayClass : \"\"}`,\n      onClick: () => setIsCustomInput(true),\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomInput, \"wC+ipmAK97BabMVIrWVjznDfzlY=\");\n\n_c = CustomInput;\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/Trello/src/Components/CustomInput/CustomInput.tsx"],"names":["React","useState","X","CustomInput","props","text","onSubmit","displayClass","editClass","placeholder","defaultValue","buttonText","isCustomInput","setIsCustomInput","inputText","setInputText","submission","e","preventDefault","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,CAAT,QAAkB,eAAlB;AAEA,OAAO,mBAAP;;;AAUA,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AAAA;;AAC5C,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;AASA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAACS,YAAY,IAAI,EAAjB,CAA1C;;AAEA,QAAMM,UAAU,GAAIC,CAAD,IAAY;AAC7BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIJ,SAAS,IAAIR,QAAjB,EAA2B;AACzBS,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAT,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD;;AACDD,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,cACGD,aAAa,gBACZ;AACE,MAAA,SAAS,EAAG,qBAAoBJ,SAAS,GAAGA,SAAH,GAAe,EAAG,EAD7D;AAEE,MAAA,QAAQ,EAAEQ,UAFZ;AAAA,8BAIE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEF,SAFT;AAGE,QAAA,WAAW,EAAEL,WAAW,IAAIJ,IAH9B;AAIE,QAAA,QAAQ,EAAGc,KAAD,IAAWJ,YAAY,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJnC;AAKE,QAAA,SAAS;AALX;AAAA;AAAA;AAAA;AAAA,cAJF,eAWE;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA,gCACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA,oBAAuBV,UAAU,IAAI;AAArC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,CAAD;AAAG,UAAA,OAAO,EAAE,MAAME,gBAAgB,CAAC,KAAD,CAAlC;AAA2C,UAAA,SAAS,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADY,gBAkBZ;AACE,MAAA,SAAS,EAAG,wBAAuBN,YAAY,GAAGA,YAAH,GAAkB,EAAG,EADtE;AAEE,MAAA,OAAO,EAAE,MAAMM,gBAAgB,CAAC,IAAD,CAFjC;AAAA,gBAIGR;AAJH;AAAA;AAAA;AAAA;AAAA;AAnBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAnDQF,W;;KAAAA,W;AAqDT,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport { X } from \"react-feather\";\n\nimport \"./CustomInput.css\";\ninterface CustomInputProps {\n  text: string;\n  onSubmit: (value: string) => void;\n  displayClass?: string;\n  editClass?: string;\n  placeholder?: string;\n  defaultValue?: string;\n  buttonText?: string;\n}\nfunction CustomInput(props: CustomInputProps) {\n  const {\n    text,\n    onSubmit,\n    displayClass,\n    editClass,\n    placeholder,\n    defaultValue,\n    buttonText,\n  } = props;\n  const [isCustomInput, setIsCustomInput] = useState(false);\n  const [inputText, setInputText] = useState(defaultValue || \"\");\n\n  const submission = (e: any) => {\n    e.preventDefault();\n    if (inputText && onSubmit) {\n      setInputText(\"\");\n      onSubmit(inputText);\n    }\n    setIsCustomInput(false);\n  };\n\n  return (\n    <div className=\"custom-input\">\n      {isCustomInput ? (\n        <form\n          className={`custom-input-edit ${editClass ? editClass : \"\"}`}\n          onSubmit={submission}\n        >\n          <input\n            type=\"text\"\n            value={inputText}\n            placeholder={placeholder || text}\n            onChange={(event) => setInputText(event.target.value)}\n            autoFocus\n          />\n          <div className=\"custom-input-edit-footer\">\n            <button type=\"submit\">{buttonText || \"Add\"}</button>\n            <X onClick={() => setIsCustomInput(false)} className=\"closeIcon\" />\n          </div>\n        </form>\n      ) : (\n        <p\n          className={`custom-input-display ${displayClass ? displayClass : \"\"}`}\n          onClick={() => setIsCustomInput(true)}\n        >\n          {text}\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}