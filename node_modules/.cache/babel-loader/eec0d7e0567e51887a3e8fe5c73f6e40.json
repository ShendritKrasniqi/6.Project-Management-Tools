{"ast":null,"code":"var _jsxFileName = \"C:\\\\Trello\\\\src\\\\Home\\\\Dashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"../Components/Board/Board\";\nimport \"./Dashboard.css\";\nimport CustomInput from \"../Components/CustomInput/CustomInput\";\nimport { fetchBoardList, updateLocalStorageBoards } from \"../Helper/APILayers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const [boards, setBoards] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    const boards = await fetchBoardList();\n    setBoards(boards);\n  }\n\n  const [targetCard, setTargetCard] = useState({\n    boardId: 0,\n    cardId: 0\n  });\n\n  const addboardHandler = name => {\n    const tempBoardsList = [...boards];\n    tempBoardsList.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: []\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeBoard = boardId => {\n    const boardIndex = boards.findIndex(item => item.id === boardId);\n    if (boardIndex < 0) return;\n    const tempBoardsList = [...boards];\n    tempBoardsList.splice(boardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const addCardHandler = (boardId, title) => {\n    const boardIndex = boards.findIndex(item => item.id === boardId);\n    if (boardIndex < 0) return;\n    const tempBoardsList = [...boards];\n    tempBoardsList[boardIndex].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title,\n      labels: [],\n      date: \"\",\n      tasks: [],\n      desc: \"\"\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeCard = (boardId, cardId) => {\n    const boardIndex = boards.findIndex(item => item.id === boardId);\n    if (boardIndex < 0) return;\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n    const cardIndex = cards.findIndex(item => item.id === cardId);\n    if (cardIndex < 0) return;\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const updateCard = (boardId, cardId, card) => {\n    const boardIndex = boards.findIndex(item => item.id === boardId);\n    if (boardIndex < 0) return;\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n    const cardIndex = cards.findIndex(item => item.id === cardId);\n    if (cardIndex < 0) return;\n    tempBoardsList[boardIndex].cards[cardIndex] = card;\n    setBoards(tempBoardsList);\n  };\n\n  const onDragEnd = (boardId, cardId) => {\n    var _boards$sourceBoardIn, _boards$sourceBoardIn2, _boards$targetBoardIn, _boards$targetBoardIn2;\n\n    const sourceBoardIndex = boards.findIndex(item => item.id === boardId);\n    if (sourceBoardIndex < 0) return;\n    const sourceCardIndex = (_boards$sourceBoardIn = boards[sourceBoardIndex]) === null || _boards$sourceBoardIn === void 0 ? void 0 : (_boards$sourceBoardIn2 = _boards$sourceBoardIn.cards) === null || _boards$sourceBoardIn2 === void 0 ? void 0 : _boards$sourceBoardIn2.findIndex(item => item.id === cardId);\n    if (sourceCardIndex < 0) return;\n    const targetBoardIndex = boards.findIndex(item => item.id === targetCard.boardId);\n    if (targetBoardIndex < 0) return;\n    const targetCardIndex = (_boards$targetBoardIn = boards[targetBoardIndex]) === null || _boards$targetBoardIn === void 0 ? void 0 : (_boards$targetBoardIn2 = _boards$targetBoardIn.cards) === null || _boards$targetBoardIn2 === void 0 ? void 0 : _boards$targetBoardIn2.findIndex(item => item.id === targetCard.cardId);\n    if (targetCardIndex < 0) return;\n    const tempBoardsList = [...boards];\n    const sourceCard = tempBoardsList[sourceBoardIndex].cards[sourceCardIndex];\n    tempBoardsList[sourceBoardIndex].cards.splice(sourceCardIndex, 1);\n    tempBoardsList[targetBoardIndex].cards.splice(targetCardIndex, 0, sourceCard);\n    setBoards(tempBoardsList);\n    setTargetCard({\n      boardId: 0,\n      cardId: 0\n    });\n  };\n\n  const onDragEnter = (boardId, cardId) => {\n    if (targetCard.cardId === cardId) return;\n    setTargetCard({\n      boardId: boardId,\n      cardId: cardId\n    });\n  };\n\n  useEffect(() => {\n    updateLocalStorageBoards(boards);\n  }, [boards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Project MGMT Tools - Shendrit Krasniqi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-boards-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-boards\",\n        children: [boards.map(item => /*#__PURE__*/_jsxDEV(Board, {\n          board: item,\n          addCard: addCardHandler,\n          removeBoard: () => removeBoard(item.id),\n          removeCard: removeCard,\n          onDragEnd: onDragEnd,\n          onDragEnter: onDragEnter,\n          updateCard: updateCard\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-boards-last\",\n          children: /*#__PURE__*/_jsxDEV(CustomInput, {\n            displayClass: \"app-boards-add-board\",\n            editClass: \"app-boards-add-board-edit\",\n            placeholder: \"Enter Board Name\",\n            text: \"Add Board\",\n            buttonText: \"Add Board\",\n            onSubmit: addboardHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"4WJH1vWdj7SbSWA6Gl3QP/gEYr0=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Trello/src/Home/Dashboard.tsx"],"names":["React","useEffect","useState","Board","CustomInput","fetchBoardList","updateLocalStorageBoards","Dashboard","boards","setBoards","fetchData","targetCard","setTargetCard","boardId","cardId","addboardHandler","name","tempBoardsList","push","id","Date","now","Math","random","title","cards","removeBoard","boardIndex","findIndex","item","splice","addCardHandler","labels","date","tasks","desc","removeCard","cardIndex","updateCard","card","onDragEnd","sourceBoardIndex","sourceCardIndex","targetBoardIndex","targetCardIndex","sourceCard","onDragEnter","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Board from \"../Components/Board/Board\";\nimport \"./Dashboard.css\";\nimport CustomInput from \"../Components/CustomInput/CustomInput\";\nimport { ICard, IBoard } from \"../Interfaces/Kanban\";\nimport { fetchBoardList, updateLocalStorageBoards } from \"../Helper/APILayers\";\n\nfunction Dashboard() {\n  const [boards, setBoards] = useState<IBoard[]>([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    const boards: IBoard[] = await fetchBoardList();\n    setBoards(boards);\n  }\n  const [targetCard, setTargetCard] = useState({\n    boardId: 0,\n    cardId: 0,\n  });\n\n  const addboardHandler = (name: string) => {\n    const tempBoardsList = [...boards];\n    tempBoardsList.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeBoard = (boardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList.splice(boardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const addCardHandler = (boardId: number, title: string) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList[boardIndex].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title,\n      labels: [],\n      date: \"\",\n      tasks: [],\n      desc: \"\",\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeCard = (boardId: number, cardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const updateCard = (boardId: number, cardId: number, card: ICard) => {\n    const boardIndex = boards.findIndex((item) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    tempBoardsList[boardIndex].cards[cardIndex] = card;\n\n    setBoards(tempBoardsList);\n  };\n\n  const onDragEnd = (boardId: number, cardId: number) => {\n    const sourceBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === boardId,\n    );\n    if (sourceBoardIndex < 0) return;\n\n    const sourceCardIndex = boards[sourceBoardIndex]?.cards?.findIndex(\n      (item) => item.id === cardId,\n    );\n    if (sourceCardIndex < 0) return;\n\n    const targetBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === targetCard.boardId,\n    );\n    if (targetBoardIndex < 0) return;\n\n    const targetCardIndex = boards[targetBoardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cardId,\n    );\n    if (targetCardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const sourceCard = tempBoardsList[sourceBoardIndex].cards[sourceCardIndex];\n    tempBoardsList[sourceBoardIndex].cards.splice(sourceCardIndex, 1);\n    tempBoardsList[targetBoardIndex].cards.splice(\n      targetCardIndex,\n      0,\n      sourceCard,\n    );\n    setBoards(tempBoardsList);\n\n    setTargetCard({\n      boardId: 0,\n      cardId: 0,\n    });\n  };\n\n  const onDragEnter = (boardId: number, cardId: number) => {\n    if (targetCard.cardId === cardId) return;\n    setTargetCard({\n      boardId: boardId,\n      cardId: cardId,\n    });\n  };\n\n  useEffect(() => {\n    updateLocalStorageBoards(boards);\n  }, [boards]);\n  return (\n    <div className=\"app\">\n      <div className=\"app-nav\">\n        <h1>Project MGMT Tools - Shendrit Krasniqi</h1>\n      </div>\n      <div className=\"app-boards-container\">\n        <div className=\"app-boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              onDragEnd={onDragEnd}\n              onDragEnter={onDragEnter}\n              updateCard={updateCard}\n            />\n          ))}\n          <div className=\"app-boards-last\">\n            <CustomInput\n              displayClass=\"app-boards-add-board\"\n              editClass=\"app-boards-add-board-edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}